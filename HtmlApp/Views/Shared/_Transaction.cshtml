@model Libraries.Models.TransactionViewModel


<div class="row">
    <div class="col-md-6">
        <h2>Withdraw</h2>
        <form id="submit-withdraw">
            <div class="form-group input-group-lg">
                <input id="withdraw-input" type="number" class="form-control" placeholder="Enter Withdraw Amount ($)" min=".01" max="5000" step="any" required>
                <button class="btn btn-lg btn-primary" type="submit">Submit</button>
            </div>
        </form>
        <br>
    </div>
    <div class="col-md-6">
        <h2>Deposit</h2>
        <form id="submit-deposit">
            <div class="form-group input-group-lg">
                <input id="deposit-input" type="number" class="form-control" placeholder="Enter Deposit Amount ($)" min=".01" max="5000" step="any" required>
                <button class="btn btn-lg btn-primary" type="submit">Submit</button>
            </div>
        </form>
        <br>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h2>Transaction History:</h2>               
        <div class="transaction-scroll-container">
            <table class="table table-bordered table-striped">
                <thead>
                <tr>
                    <th>Date</th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Balance</th>
                </tr>
                </thead>
                <tbody id="transactions">
                </tbody>
                </table>                                     
            </div>
        </div>
</div>

<script type="text/javascript">


    function getTransactions() {

        var jqxhr = $.ajax({
            type: "GET",
            url: "@Url.Action( "TransactionHistory", "Transaction" )"
        });

        jqxhr.always(function(response) {

            if (jqxhr.status === 200) {
                var balance = 0;
                var childNodes = [];
                for (var i = 0; i < jqxhr.responseJSON.Data.length; i++) {
                    var temp = jqxhr.responseJSON.Data[i];
                    var tempRow = document.createElement("tr");
                    var tdDate = document.createElement("td");
                    var tdType = document.createElement("td");
                    var tdAmount = document.createElement("td");
                    var tdBalance = document.createElement("td");

                    tdDate.innerHTML = temp.Date;
                    tdType.innerHTML = temp.IsDeposit === true ? "Deposit" : "Withdraw";
                    tdAmount.innerHTML = parseFloat(temp.Amount).toFixed(2).toString();

                    if (tdType.innerHTML === "Deposit") {
                        balance += parseFloat(temp.Amount);
                    } else {
                        balance -= parseFloat(temp.Amount);
                        tdAmount.innerHTML = "-" + tdAmount.innerHTML;
                        tdAmount.style.color = "red";
                        tdType.style.color = "red";
                    }

                    tdBalance.innerHTML = balance.toFixed(2).toString();
                    tempRow.appendChild(tdDate);
                    tempRow.appendChild(tdType);
                    tempRow.appendChild(tdAmount);
                    tempRow.appendChild(tdBalance);
                    childNodes[i] = tempRow;
                }

                for (var j = childNodes.length - 1; j >= 0; j--) {
                    document.getElementById("transactions").appendChild(childNodes[j]);
                }
            }
        });
    }

    $(document).ready(function() {

        getTransactions();


        //Deposit
        $("#submit-deposit").submit(function(e) {
            e.preventDefault();

            var data = {
                UserEmail: "@Session["UserId"]",
                Date: new Date(),
                IsWithdraw: false,
                IsDeposit: true,
                Amount: $("#deposit-input").val()
            }

            if (data.Amount === "") {
                $("#deposit-input").val("0");
                return;
            }

            var jqxhr = $.ajax({
                dataType: "JSON",
                type: "POST",
                url: "@Url.Action( "Transaction", "Transaction" )",
                data: data
            });

            var _jqxhr = jqxhr;
            jqxhr.always(function() {
                if (_jqxhr.status === 200) {
                    location.reload(true);
                }
            });
        });


        //Withdraw
        $("#submit-withdraw").submit(function(e) {
            e.preventDefault();
            var data = {
                UserEmail: "@Session["UserId"]",
                Date: new Date(),
                IsWithdraw: true,
                IsDeposit: false,
                Amount: $("#withdraw-input").val()
            }

            if (data.Amount === "") {
                $("#deposit-input").val("0");
                return $("#submit-withdraw").submit();
            }

            var jqxhr = $.ajax({
                dataType: "JSON",
                type: "POST",
                url: "@Url.Action( "Transaction", "Transaction" )",
                data: data
            });

            var _jqxhr = jqxhr;
            jqxhr.always(function() {
                if (_jqxhr.status === 200) {
                    location.reload(true);
                }


            });
        });


    });


</script>